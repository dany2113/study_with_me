
# region üìö –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ï–ì–≠ | –ó–∞–¥–∞–Ω–∏–µ ‚Ññ8

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1:
# –í—Å–µ —à–µ—Å—Ç–∏–±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤ —Å–æ—Å—Ç–∞–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –ê, –ï, –ö, –ù, –° –∑–∞–ø–∏—Å–∞–Ω—ã
# –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å 1.
# –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.
#
# –ê–ê–ê–ê–ê–ê
# –ê–ê–ê–ê–ê–ï
# –ê–ê–ê–ê–ê–ö
# –ê–ê–ê–ê–ê–ù
# –ê–ê–ê–ê–ê–°
# –ê–ê–ê–ê–ï–ê
# –ü–æ–¥ –∫–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ —Å–ø–∏—Å–∫–µ –∏–¥—ë—Ç —Å–ª–æ–≤–æ –°–ï–ù–ï–ö–ê?

# –†–µ—à–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ itertools):
'''
import itertools
count = 0
for s in itertools.product('–ê–ï–ö–ù–°', repeat=6):
    slovo = ''.join(s)
    count += 1
    if slovo == '–°–ï–ù–ï–ö–ê':
        print(count)
'''

# –†–µ—à–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ —Ü–∏–∫–ª for):
'''
s = '–ê–ï–ö–ù–°'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    for f in s:
                        slovo = a + b + c + d + e + f
                        count += 1
                        if slovo == '–°–ï–ù–ï–ö–ê':
                            print(count)
'''


# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2:
# –Ø—Ä–æ—Å–ª–∞–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–¥—ã –∏–∑ –±—É–∫–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Å–ª–æ–≤–æ –Ø–†–û–°–õ–ê–í.
# –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 –±—É–∫–≤,
# –±—É–∫–≤—ã –≤ –∫–æ–¥–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –≤ –∫–æ–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≥–ª–∞—Å–Ω—ã—Ö,
# –¥–≤–µ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ä—è–¥–æ–º.
# –°–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ø—Ä–æ—Å–ª–∞–≤?

# –†–µ—à–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ itertools):
'''
import itertools
count = 0
for s in itertools.permutations('–Ø–†–û–°–õ–ê–í', 5):
    slovo = ''.join(s)
    glas = [i for i in slovo if i in '–Ø–û–ê']
    sogl = [i for i in slovo if i in '–†–°–õ–í']
    if len(sogl) > len(glas):
        if all(x not in slovo for x in '–Ø–ê –ê–Ø –ê–û –û–ê –Ø–û –û–Ø'.split()):
            count += 1
print(count)
'''

# –†–µ—à–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ —Ü–∏–∫–ª for):
'''
s = '–Ø–†–û–°–õ–ê–í'
count = 0
for a in s:
    for b in s:
        for c in s:
            for d in s:
                for e in s:
                    slovo = a + b + c + d + e
                    if len(set(slovo)) == 5:
                        glas = [i for i in slovo if i in '–Ø–û–ê']
                        sogl = [i for i in slovo if i in '–†–°–õ–í']
                        if len(sogl) > len(glas):
                            if all(x not in slovo for x in '–Ø–ê –ê–Ø –ê–û –û–ê –Ø–û –û–Ø'.split()):
                                count += 1
print(count)
'''


# üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∏ —Ä–∞–∑–±–æ—Ä—ã –∑–∞–¥–∞—á:
# üìò –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —à–ø–∞—Ä–≥–∞–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—à–µ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ: https://t.me/informatika_kege_itpy/362?comment=1424
# üìò –†–∞–∑–±–æ—Ä—ã 8 –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ: https://t.me/informatika_kege_itpy/360?comment=1471
# üí° –§—É–Ω–∫—Ü–∏–∏ split() –∏ join(), –≥–¥–µ –æ–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–ï–ì–≠: https://t.me/informatika_kege_itpy/126
# üí° –§—É–Ω–∫—Ü–∏–∏ all() –∏ any(), –≥–¥–µ –æ–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ï–ì–≠: https://t.me/informatika_kege_itpy/378
# üêç –§—É–Ω–∫—Ü–∏—è permutations() –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ itertools –≤ Python: https://t.me/informatika_kege_itpy/391
# üêç –§—É–Ω–∫—Ü–∏—è product –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ itertools –≤ Python: https://t.me/informatika_kege_itpy/393
# üêç –í—Å–ø–æ–º–Ω–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ itertools: https://t.me/informatika_kege_itpy/470
# endregion (–Ω–µ —É–¥–∞–ª—è–π—Ç–µ –º–µ–Ω—è, —è —Ç—É—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫)


# # todo: —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É ‚òùÔ∏è
# progress_result = ()  # –°—é–¥–∞ –∑–∞–Ω–æ—Å—è—Ç—Å—è –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ—Ä–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
# print('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª-–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ 50.')
# print(f'–ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å: ~{int(len(progress_result) * (100 / 50))}% –∑–∞–¥–∞—á –ø—Ä–æ—Ä–µ—à–∞–Ω–æ.')


# from itertools import *
# p = sorted("–¢–ï–û–†–ò–Ø")
# k = 0
# for i in product(p, repeat=6):
#     i = "".join(i)
#     k += 1
#     if k % 2 != 0 and i[0] not in "–†–¢–Ø" and i.count("–ò") >= 2:
#         print(i, k)

# from itertools import *
# p = sorted("–§–æ–∫—É—Å")
# k = 0
# for s in product(p, repeat=5):
#     s = "".join(s)
#     k += 1
#     if "–§" not in s and s.count("—É")== 2:
#         print(s, k)


# from itertools import *
# cnt = 0
# p = "BLANK"
# for s in product(p, repeat= 6):
#     s = "".join(s)
#     if s.count("N") == 2 and s[0] == "K":
#         cnt += 1
# print(cnt)

# from itertools import *
# cnt = 0
# p = "0123456"
# k = "0246"
# for s in product(p, repeat = 5):
#     s = "".join(s)
#     if s.count("4") == 1 and s[-1] not in k and s[0] != "0":
#         cnt += 1
#         print(s, cnt)

# from itertools import *
# cnt = 0
# p = "01234"
# for s in product(p, repeat = 5):
#     s = "".join(s)
#     if s.count("4") == 1 and "42" not in s and "24" not in s and s[0] != "0":
#         cnt += 1
# print(cnt)

# from itertools import *
# cnt = 0
# p = "01234567"
# cht = "0246"
# for s in product(p, repeat = 5):
#     s = "".join(s)
#     if s[0] not in cht and (s[-1] not in "27") and s.count("3") <= 1:
#         cnt += 1
#         print(s, cnt)


# from itertools import *
# cnt  = 0
# p = "–§–û–†–ú–ê–¢"
# for s in set(permutations(p, r = 5)):
#     s= "".join(s)
#     if s[0] != "–ê" and s.count("–†") == 1:
#         cnt += 1
# print(cnt)

# from itertools import *
# cnt = 0
# p = "MEDIA"
# for s in permutations(p, r = 5):
#     s = "".join(s)
#     if s[0] != "A" and "EDA" not in s:
#         cnt += 1
#         print(s, cnt)

# from itertools import *
# cnt = 0
# p = "PIKSELO"
# for s in permutations(p, r = 7):
#     s = "".join(s)
#     if s[0] != "O" and "OIE" not in s:
#         cnt += 1
# print(cnt)

# from itertools import *
# cnt = 0
# p = "TARA"
# for s in set(permutations(p, r = 4)):
#     s = "".join(s)
#     if "AA" not in s:
#         cnt += 1
#         print(s, cnt)

# from itertools import *
#
# p = "0123"
# cnt = 0
# for s in permutations(p, r=3):
#     s = "".join(s)
#     if (int(s[0]) > int(s[1])) and (int(s[1]) > int(s[2])):
#         cnt += 1
#         print(s, cnt)

# from itertools import *
# p = "0123456789"
# cnt = 0
# for s in product(p, repeat = 5):
#     s = "".join(s)
#     if s.count("2") >= 1 or s.count("3") >= 1:
#         cnt += 1
# print(cnt)

# from itertools import *
# p = sorted("AKORST")
# cnt = 0
# for s in product(p, repeat=5):
#     s = "".join(s)
#     cnt += 1
#     if cnt % 2 == 0 and s[0] not in "AST" and s.count("O") == 2:
#         print(cnt)

# from itertools import *
# cnt = 0
# for s in product("AKMS", repeat = 6):
#     s = "".join(s)
#     cnt += 1
#     if s.count("S") == 0 and s.count("M") == 0 and "KK" not in s:
#         print(cnt)

# cnt = 0
# for s in range(100000, 1000000):
#     s = str(s)
#     cnt += 1
#     if str(cnt)[-1] == "5":
#         print(s, cnt)

# from itertools import *
# cnt  =0
# for s in product("–ê–ö–û–†–°–¢", repeat = 5):
#     s = "".join(s)
#     cnt += 1
#     if s.count("–°") == 1 and s[0] not in "–ê–õ" and cnt % 2 != 0:
#         print(cnt)

# from itertools import *
# cnt = 0
# for s in product("–î–ò–û–ù–°–ô", repeat = 6):
#     s = "".join(s)
#     if ("–î" in s) + ("–ù" in s) == 1:
#         if all(s[i] != s[i+1] for i in range(0, len(s)-1)):
#             cnt += 1
# print(cnt)

#
# from itertools import *
# cnt = 0
# for p in product("–õ–Æ–°–¢–†–ê", repeat = 5):
#     p = "".join(p)
#     if p.count("–Æ") <= 2:
#         if p[-1] not in "–õ–°–¢–†":
#             cnt += 1
# print(cnt)
#
# from itertools import *
# cnt = 0
# for p in product("–ê–õ–ì–û–†–ò–¢–ú", repeat = 6):
#     p = "".join(p)
#     if p.count("–õ") <= 1:
#         if p[0] != "–†" and p[-1] not in "–õ–ì–†–¢–ú":
#             cnt += 1
# print(cnt)

# from itertools import *
# num = 0
# for p in product("01234567", repeat = 5):
#     p = "".join(p)
#     if p[0] != '0':
#         copied3 = [x for x in p if p.count(x) == 3]
#         copied1 = [x for x in p if p.count(x) == 1]
#         if len(copied3) == 3 and len(copied1) == 2:
#             if copied3[0] * 3 in p:
#                 num += 1
# print(num)

# from itertools import *
# cnt = 0
# for p in set(permutations("–°–û–¢–û–ß–ö–ê", r= 7)):
#     p = "".join(p)
#     if "–û–ê" in p or "–ê–û" in p:
#         cnt += 1
# print(cnt)

# from itertools import *
# n = []
# for p in permutations('–°–û–¢–û–ß–ö–ê'):
#     word = ''.join(p)
#     if '–û–û' in word or '–û–ê' in word or '–ê–û' in word:
#         n.append(word)
#         print(word)
# print(len(set(n)))


# from itertools import product
# n = 0
# l = []
# for p in product(sorted("–ú–ê–†–ö–°–õ"), repeat = 6):
#     p = "".join(p)
#     n += 1
#     # chis1 = [x for x in p if p.count(x) == 3] –∫–∞–∫ –±—ã —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ—á–∫—É
#     chis1 = [x for x in p if p.count(x) == 3]
#     # chis2 = [x for x in p if p.count(x) == 1] –∑–¥–µ—Å—å —Ç–æ –∂–µ —Å–∞–º–æ–µ
#     chis2 = [x for x in p if p.count(x) == 1]
#     # if len(chis1) == 3 and len(chis2) == 3: –ø—Ä–æ–≤–µ—Ä—è–µ—Å –¥–ª–∏–Ω—É –∫–∞–∫ –±—ã —Ä–∞–∑–±–∏—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
#     if len(chis1) == 3 and len(chis2) == 3:
#         if "–ö–°" not in p and "–°–ö" not in p:
#             l.append(n)
# print(max(l))

# from itertools import product
# cnt = 0
# for p in product("0123456789ABCDE", repeat = 5):
#     p = "".join(p)
#     if p[0] != "0":
#         bol = [x for x in p if x > "9"]
#         if len(bol) >= 2:
#             if p.count("8") == 1:
#                 cnt += 1
# print(cnt)

# from itertools import product
# k = 0
# # for x in product(sorted('0123456789"AAAAA"'), repeat=5): –≥–µ–Ω–∏–∞–ª—å–Ω–æ –ê–ê–ê–ê–ê
#     s = ''.join(x)
#     if s[0]!='0' and s.count('8')==1 and s.count('A')>=2:
#         k+=1
# print(k)
#
# from itertools import product
# n = 0
# l = []
# for p in product(sorted("–ü–Ø–¢–¨–î–ù–ï–ô"), repeat = 4):
#     p = "".join(p)
#     n += 1
#     if len(p) == len(set(p)):
#         for x in "–Ø–ï":
#             p = p.replace(x, "*")
#         if p.count("*") == 0:
#             l.append(n)
# print(max(l))

# from itertools import product
# cnt = 0
# for p in product("–í–¨–Æ–ì–ê", repeat = 6):
#     p = "".join(p)
#     if "–Æ–ì" in p:
#         print(p)
#         cnt += 1
# print(cnt)

# from itertools import *
# n = 0
# for  p in product(sorted("–ü–û–ë–ï–î–ê"), repeat = 6):
#     p = "".join(p)
#     n += 1
#     if n % 2 == 0:
#         if p[0] == "–û":
#             if len(p) == len(set(p)):
#                 print(n)

# from itertools import *
# n = 0
# for p in product("–ñ–ò–í–û–î–Å–†–ù–Ø", repeat = 5):
#     p = "".join(p)
#     n += 1
#     if n % 2 == 0:
#         if p[0] == p[-1]:
#             if p.count("–†") >= 2:
#                 print(p, n)

# from itertools import *
# n  = 0
# for p in product("–ë–£–†–ê–¢–ò–ù–û", repeat = 5):
#     p = "".join(p)
#     n += 1
#     if n % 2 != 0:
#         if p[0] not in "–£–ê–ò–û":
#             if len(p) == len(set(p)):
#                 print(n, p)

# from itertools import *
# n = 0
# for p in product("–ö–û–ú–ü–¨–Æ–¢–ï–†", repeat= 5):
#     p = "".join(p)
#     n += 1
#     if n % 2 != 0:
#         if p[0] not in "–ö–û":
#             if p.count("–¢") >= 3:
#                 print(n, p)

# from itertools import *
# n = 0
# l = []
# for p in product(sorted("–§–û–ö–£–°"), repeat = 5):
#     p = "".join(p)
#     n += 1
#     if p.count("–§") == 0:
#         if p.count("–£") == 2:
#             l.append(n)
# print(max(l))

# from itertools import *
# n = 0
# for p in product(sorted("–§–ï–í–†–ê–õ–¨"), repeat = 6):
#     p = "".join(p)
#     n += 1
#     if "–ï" not in p and "–ê" not in p:
#         print(n)
#         break

# from itertools import permutations
# cnt = 0
# for p in set(permutations("–ö–õ–ê–ë–•–ê–£–°")):
#     p = "".join(p)
#     if "–ê–ê" not in p:
#         cnt += 1
#         print(cnt)  ***

# from itertools import *
# cnt = 0
# for p in product("01234567", repeat = 5):
#     if p[0] != "0":
#         p = "".join(p)
#         # if p[0] not in "1357":
#         if int(p[0]) % 2 == 0:
#             # if p[-1] not in "26": 9135
#             if p[-1] != "2" and p[-1] != "6":
#                 if p.count("7") <= 2:
#                     cnt += 1
# print(cnt)



# from itertools import *
# cnt = 0
# for p in product("01234567", repeat = 7):
#     if p[0] != "0":
#         p = "".join(p)
#         if p.count("0") == 2:
#             for x in "1357":
#                 p = p.replace(x, "*")
#             for x in "0246":
#                 p = p.replace(x, "-")
#             if "**" not in p or "--" not in p:
#                 cnt += 1
# print(cnt)

# from itertools import *
# cnt = 0
# for p in product("–Ø–ù–í–ê–†–¨", repeat = 5):
#     p = "".join(p)
#     cnt += 1
#     if p[0] != "–Ø":
#         if p.count("–¨") <= 1:
#             if "–Ø–Ø" not in p:
#                 print(cnt, p)

# from itertools import *
# n = 0
# for p in product(sorted("–í–ï–ù–ï–†–ê"), repeat = 5):
#     p = "".join(p)
#     n += 1
#     if p[0] != "–ù":
#         if p.count("–í") == 2:
#             print(n)

# from itertools import *
# n = 0
# for p in product(sorted("–§–û–ö–£–°"), repeat = 5):
#     p = "".join(p)
#     if p.count("–§") == 0 and p.count("–£") == 2:
#         print(n)
#     n += 1

# from itertools import *
# cnt = 0
# for p in product(sorted("–ê–õ–ì–û–†–ò–¢–ú"), repeat = 5):
#     p = "".join(p)
#     cnt += 1
#     if cnt % 2 == 0:
#         if p[0] not in "–¢–†":
#             if p.count("–ò")>=2:
#                 print(cnt)

# from itertools import *
# cnt = 0
# for p in product("0123456", repeat= 5):
#     if p[0] != "0":
#         p = "".join(p)
#         if p.count("6") == 1:
#             for i in p:
#                 if p.count(i) > 1:
#                     p = p.replace(i, "*")
#             if "**" not in p:
#                 cnt += 1
# print(cnt)



# def summ(x):
#     l = []
#     for i in x:
#         l.append(int(i))
#     return sum(l)
#
# n = 0
# for pech in range(0, 23+1):
#     for vtorch in range(0, 59+1):
#         if pech % 2 == 0 and vtorch % 2 == 0:
#             if summ(str(pech)) == summ(str(vtorch)):
#                 n += 1
# print(n)
